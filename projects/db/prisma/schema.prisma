// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_URL")
}

model Profile {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  email       String  @unique
  picture_url String?
  first_name  String?
  last_name   String?
  phone       String?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  OrganizationMember OrganizationMember[]
  GroupMember        GroupMember[]
  ScheduledExam      ScheduledExam[]
}

model Organization {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  name        String
  description String?
  picture_url String?
  website     String?
  email       String?
  phone       String?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  OrganizationMember OrganizationMember[]
}

model OrganizationMember {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  organization_id String
  profile         Profile      @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id      String
  role            String

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model Group {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  name        String
  description String?
  picture_url String?
  website     String?
  email       String?
  phone       String?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  GroupMember   GroupMember[]
  ScheduledExam ScheduledExam[]
}

model GroupMember {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  group      Group   @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id   String
  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model Exam {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  name        String
  description String?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  ScheduledExam ScheduledExam[]
  Question      Question[]
}

model ScheduledExam {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  exam_id    String
  exam       Exam     @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  profile_id String?
  profile    Profile? @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  group_id   String?
  group      Group?   @relation(fields: [group_id], references: [id], onDelete: Cascade)

  start_time DateTime
  end_time   DateTime

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FREE_TEXT
}

model Question {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  type      QuestionType
  exam_id   String
  exam      Exam         @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  question  String
  image_url String?

  // FREE_TEXT
  expected_answer String?

  // MULTIPLE_CHOICE
  options         String[]
  correct_options Boolean[]

  // TRUE_FALSE
  boolean_expected_answer Boolean?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}
